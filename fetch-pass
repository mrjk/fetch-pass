#!/bin/bash
# TEMPLATE_VERSION=2024-08-27

# Script informations
# =========================

# Simple tool to access secrets in various sources

# Use cases
# * Useful to fetch passwords in terminal or in scripts
# * Provide a simple endpoint that display a password for a given secret_name
# * Allow to integrate basically any other password manager

# Base features
# * Nice CLI and simple optional ini file configuration
# * Allow to manage any secret backends
# * Allow easily to import/sync with local keyring deamon
# * Allow secret name remapping depending backends
# * Simple ini file configuration
# * Portable bash script
# * Secret completion (when keyring is unlocked)

# Dependencies:
# * git-db: WIP


set -euo pipefail

# App Global variable
# =================

# Global vars
APP_SCRIPT="${0##*/}"
APP_NAME="fetch-pass"

# Metadata vars
APP_AUTHOR="mrjk"
APP_EMAIL="mrjk.78 at gmail.com"
APP_LICENSE="GPLv3"
APP_URL="https://github.com/$APP_AUTHOR/$APP_NAME"
APP_REPO="https://github.com/$APP_AUTHOR/$APP_NAME.git"
APP_GIT="git@github.com:$APP_AUTHOR/$APP_NAME.git"

APP_STATUS=stable
APP_DATE="2024-08-17"
APP_VERSION=0.0.1

# App configuration
APP_LOG_SCALE="TRACE:DEBUG:RUN:INFO:DRY:HINT:NOTICE:CMD:USER:WARN:ERR:ERROR:CRIT:TODO:DIE:QUIT"
APP_DEPENDENCIES="git-db"

APP_DRY=${APP_DRY:-false}
APP_FORCE=${APP_FORCE:-false}
APP_LOG_LEVEL=INFO
#APP_LOG_LEVEL=DRY
#APP_LOG_LEVEL=DEBUG

# Automatic vars
SCRIPT_REAL_PATH=$(realpath "$0")
SCRIPT_REAL_DIR=$( cd -- "$( dirname -- "$SCRIPT_REAL_PATH" )" &> /dev/null && pwd )
APP_REAL_NAME=$(basename "$SCRIPT_REAL_PATH")

APP_CONFIG_DIR=${XDG_CONFIG_HOME:-$HOME/.config}/$APP_REAL_NAME
APP_CONFIG_FILE=$APP_CONFIG_DIR/config.ini
APP_DISABLE_KEYRING=false


# CLI libraries
# =================

# Logging support, with levels
_log ()
{
  local lvl="${1:-DEBUG}"
  shift 1 || true

  # Check log level filter
  if [[ ! ":${APP_LOG_SCALE#*$APP_LOG_LEVEL:}:$APP_LOG_LEVEL:" =~ :"$lvl": ]]; then
    if [[ ! ":${APP_LOG_SCALE}" =~ :"$lvl": ]]; then
      >&2 printf "%s\n" "  BUG: Unknown log level: $lvl"
    else
      return 0
    fi
  fi

  local msg=${*}
  if [[ "$msg" == '-' ]]; then
    msg="$(cat - )"
  fi
  while read -r -u 3 line ; do
    >&2 printf "%5s: %s\\n" "$lvl" "${line:- }"
  done 3<<<"$msg"
}

# Terminate all with error message and rc code
_die ()
{
    local rc=${1:-1}
    shift 1 || true
    local msg="${*:-}"
    local prefix=QUIT
    [[ "$rc" -eq 0 ]] || prefix=DIE
    if [[ -z "$msg" ]]; then
      [ "$rc" -ne 0 ] || exit 0
      _log "$prefix" "Program terminated with error: $rc"
    else
      _log "$prefix" "$msg"
    fi

    # Remove EXIT trap and exit nicely
    trap '' EXIT
    exit "$rc"
}

# Run command with dry mode support
_exec ()
{
  local cmd=( "$@" )
  if ${APP_DRY:-false}; then
    _log DRY "  | ${cmd[@]}"
  else
    _log RUN "  | ${cmd[@]}"
    "${cmd[@]}"
  fi
}   

# Dump all application vars (debug)
# shellcheck disable=SC2120 # Argument is optional by default
_dump_vars ()
{
  local prefix=${1:-APP_}
  declare -p | grep " .. $prefix" >&2 || {
      >&2 _log WARN "No var starting with: $prefix"
  }
}

# Ensure a program is available
_check_bin ()
{
  local cmd cmds="${*:-}"
  for cmd in $cmds; do
    command -v "$1" >&/dev/null || return 1
  done
}

# Internal helper to show bash traces (debug)
# shellcheck disable=SC2120 # Argument is optional by default
_sh_trace ()
{
  local msg="${*}"

  (
    >&2 printf "%s\n" "TRACE: line, function, file"
    for i in {0..10}; do
      trace=$(caller "$i" 2>&1 || true )
      if [ -z "$trace" ] ; then
        continue
      else
        printf "%s\n" "$trace"
      fi
    done | tac | head -n -1
    [ -z "$msg" ] || >&2 printf "%s\n" "TRACE: Bash trace: $msg"
  )
}

# Internal function to catch errors
# Usage: trap '_sh_trap_error $? ${LINENO} trap_exit 42' EXIT
_sh_trap_error () {
    local rc=$1
    [[ "$rc" -ne 0 ]] || return 0
    local line="$2"
    local msg="${3-}"
    local code="${4:-1}"
    set +x

    _log ERR "Uncatched bug:"
    _sh_trace # | _log TRACE -
    if [[ -n "$msg" ]] ; then
      _log ERR "Error on or near line ${line}: ${msg}; got status ${rc}"
    else
      _log ERR "Error on or near line ${line}; got status ${rc}"
    fi
    exit "${code}"
}

# Extra libs
# =================

# Ask the user to confirm
_confirm () {
  local msg="Do you want to continue?"
  >&2 printf "%s" "${1:-$msg}"
  >&2 printf "%s" "([y]es or [N]o): "
  >&2 read REPLY
  case $(tr '[A-Z]' '[a-z]' <<< "$REPLY" ) in
    y|yes) printf "%s\n" "true" ;;
    *)     printf "%s\n" "false" ;;
  esac
}

# Ask the user to input string
_input () {
  local msg="Please enter input:"
  local default=${2-}
  >&2 printf "%s" "${1:-$msg}${default:+ [$default]}: "
  >&2 read REPLY
  [[ -n "$REPLY" ]] || REPLY=${default}
  printf "%s\n" "$REPLY"
}

# Transform yaml to json
_yaml2json ()
{
  python3 -c 'import json, sys, yaml ; y = yaml.safe_load(sys.stdin.read()) ; print(json.dumps(y))'
}



# CLI helpers
# =================

# Dispatch command
clish_dispatch ()
{
  local prefix=$1
  local cmd=${2-}
  shift 2 || true
  [ ! -z "$cmd" ] || _die 3 "Missing command name, please check usage"

  if [[ $(type -t "${prefix}${cmd}") == function ]]; then
    "${prefix}${cmd}" "$@"
  else
    _log ERROR "Unknown command for ${prefix%%_?}: $cmd"
    return 3
  fi
}


# Parse command options
# Called function must return an args array with remaining args
clish_parse_opts ()
{
  local func=$1
  shift
  clish_dispatch "$func" _options "$@"
}

# Read CLI options for a given function/command
# Options must be in a case statement and surounded by
# 'parse-opt-start' and 'parse-opt-stop' strings. Returns
# a list of value separated by ,. Fields are:
clish_help_options ()
{
  local func=$1
  local data=

  # Check where to look options function
  if declare -f "${func}_options" >/dev/null; then
    func="${func}_options"
    data=$(declare -f "$func")
    data=$(printf "%s\n%s\n" 'parse-opt-start' "$data" )
  else
    data=$(declare -f "$func")
  fi

  # declare -f ${func} \
  echo "$data" | awk '/parse-opt-start/,/parse-opt-stop/ {print}' \
    | grep --no-group-separator -A 1 -E '^ *--?[a-zA-Z0-9].*)$' \
    | sed -E '/\)$/s@[ \)]@@g;s/.*: "//;s/";//' \
    | xargs -n2 -d'\n' \
    | sed 's/ /,/;/^$/d'
}

# List all available commands starting with prefix
clish_help_subcommands ()
{
  local prefix=${1:-cli__}
  declare -f \
    | grep -E -A 2 '^'"$prefix"'[a-z0-9]*(__[a-z0-9]*)*? \(\)' \
    | sed '/{/d;/--/d;s/'"$prefix"'//;s/ ()/,/;s/";$//;s/^  *: "//;' \
    | xargs -n2 -d'\n' \
    | sed 's/, */,/;s/__/ /g;/,,$/d'
}

# Show help message of a function
clish_help_msg ()
{
  local func=$1
  clish_dispatch "$func" _usage 2>/dev/null || true
}


# Show cli usage for a given command
clish_help ()
{
  : ",Show this help"
  local func=${1:-cli}
  local commands= options= message= output=

  # Help message
  message=$(clish_help_msg $func)

  # Fetch command options
  options=$(
    while IFS=, read -r flags meta desc _; do
      if [ ! -z "${flags:-}" ]; then
        printf "  %-16s  %-20s  %s\n" "$flags" "$meta" "$desc"
      fi
    done <<< "$(clish_help_options $func)"
  )

  # Fetch sub command informations
  commands=$(
    while IFS=, read -r flags meta desc _; do
      if [ ! -z "${flags:-}" ]; then
        printf "  %-16s  %-20s  %s\n" "$flags" "$meta" "$desc"
      fi
    done <<< "$(clish_help_subcommands ${func}__)"
  )

  # Display help message
  printf "%s\n" "${message:+$message}
${commands:+
commands:
$commands}
${options:+
options:
$options
}"

  # Append extra infos
  if ! [[ "$func" == *"_"* ]]; then
    cat <<EOF
info:
  author: $APP_AUTHOR ${APP_EMAIL:+<$APP_EMAIL>}
  version: ${APP_VERSION:-0.0.1}-${APP_STATUS:-beta}${APP_DATE:+ ($APP_DATE)}
  license: ${APP_LICENSE:-MIT}
  website: ${APP_URL}
EOF
  fi

}


# DB Commands
# =================

_db ()
{
  _log TRACE "Query db: git-db -s '$FETCH_SECRET_CONF' $@"
  git-db -s "$FETCH_SECRET_CONF" "$@" 2>/dev/null
  # if [[ "$APP_LOG_LEVEL" == "TRACE" ]]; then
  #   git-db -s "$FETCH_SECRET_CONF" "$@"
  # else
  #   git-db -s "$FETCH_SECRET_CONF" "$@" 2>/dev/null
  # fi
}


# Local keyring Commands
# =================

# Add keyring entry
local_keyring_add ()
{
  local secret_name=$1
  local pass=$2

  local label="$APP_NAME password for $secret_name"

  _log TRACE "Local Keyring: add $secret_name"
  echo -n "$pass" | secret-tool store --label "$label" \
    application "$APP_NAME" \
    fetch-secret-name $secret_name
}

# Remove keyring entry
local_keyring_rm ()
{
  local secret_name=$1
  _log TRACE "Local Keyring: rm $secret_name"
  secret-tool clear \
    fetch-secret-name $secret_name
}

# Show keyring entry
local_keyring_show ()
{
  local secret_name=$1
  _log TRACE "Local Keyring: show $secret_name"
  secret-tool search \
    fetch-secret-name $secret_name
}

# Check if entry exists in keyring
local_keyring_exists ()
{
  local secret_name=$1
  local result=$(local_keyring_show "$secret_name" 2>/dev/null)
  [[ -n "$result" ]] || return 1
}

# Config Commands
# =================

# List secrets names from configuration, line separated
list_known_secrets ()
{
  {
    # Fetch Simple definitions
    _db get 'secrets.name' || true

    # Fetch extended configs
    {
      _db ls 'secret\.' || true
    } | sed 's/secret\.//'

    # Check all remaps
    all_backends=$(backends_names)
    for backend_name in ${all_backends//,/ }; do
      {
        _db get "backend.$backend_name.remap" || true
      } | sed 's/|.*//'
    done

  } | sort -u

}

# Return a list of backends names, comma separated
backends_names ()
{
  {
    _db ls 'backend\.' | sed 's/backend\.//'
  } | sort -u | tr '\n' ',' | sed 's/,$//'
}

backends_name_keyring_only ()
{

  # _die 1 "DEPRECATED FUNCTION backends_name_keyring_only"
  # return 1
  local backend_names=$(backends_names)
  for backend_name in ${backend_names//,/ } ; do
    if [[ "$backend_name" == keyring* ]]; then
      echo "$backend_name"
    fi
  done
}



# Backends Commands
# =================


backends_name_first_keyring ()
{
  for backend_name in $(backends_name_keyring_only) ; do
    if [[ -n "$backend_name" ]]; then
      echo "$backend_name"
      return
    fi
  done
  return 1
}

# Backend remap name 
backend_remap_name ()
{
  local backend_name=$1
  local secret=$2

  remaps=$(_db get "backend.$backend_name.remap" 2>/dev/null )
  while IFS='|' read old new _; do
    [[ -n "$old" ]] || continue
    if [[ "$old" == "$secret" ]]; then
      _log DEBUG "Backend '$backend_name' remapped secret '$secret' to '$new'"
      echo "$new"
      return 0
    fi
  done <<<"$remaps"
  echo "$secret"
}

# Query a backend for a given password
backend_query ()
{
  local backend_name=$1
  local secret_name=$2
  local backend_cmd=

  _log TRACE "Testing '$backend_name' backend for secret: $secret_name"

  backend_cmd=$(_db get "backend.$backend_name.cmd-fetch" 2>/dev/null )
  new_key=$(backend_remap_name "$backend_name" "$secret_name")


  local cmd=$(printf "${backend_cmd}\n" "$new_key")
  _log TRACE "Query backend command: $cmd"
  # local result=$( $cmd 2>/dev/null )
  # set -x
  local result=$( $cmd )
  # set +x

  if [[ -z "$result" ]]; then
    _log TRACE "Empty results returned from backend command"
    return 1
  fi
  FOUND_PASSWORD=$result

}


# Filter backend list by type
_filter_backends ()
{
  local mode=$1
  case "$mode" in
    no_keyring)
      tr ',' '\n' | grep -v '^keyring' | tr '\n' ','
    ;;
    keyring_only)
      tr ',' '\n' | grep '^keyring' | tr '\n' ','
    ;;
    all)
      cat -
    ;;
    *)
      cat -
      _die "Backend query mode error: $mode"
    ;;
  esac
}

# Find best backend for a given secret
backend_secret_matches ()
{
  local secret_name=$1 
  local query_mode=${2:-all}
  local ret=

  ret=$(
    _db get "secret.$secret_name.backends" 2>/dev/null \
    || _db get "config.backends" 2>/dev/null \
    || backends_names
  ) || true

  [[ -n "$ret" ]] || return 1

  ret2=$(_filter_backends "${query_mode}" <<<"$ret" )

  # DEPRECATED
  if [[ "${query_mode}" == 'no_keyring' ]]; then
    ret=$(tr ',' '\n' <<< "$ret" | grep -v '^keyring' | tr '\n' ',' )
  elif [[ "${query_mode}" == 'keyring_only' ]]; then
    ret=$(tr ',' '\n' <<< "$ret" | grep '^keyring' | tr '\n' ',' )
  elif [[ "${query_mode}" == 'all' ]]; then
    :
  else
    _die "Backend query mode error: $query_mode"
  fi

  [[ "$ret2" == "$ret" ]] || _die 5 "Bug on new algo !!!"

  [[ -n "$ret" ]] || return 1
  echo "$ret"
}



# Query backends one by one until first secret is found
backend_fetch ()
{
  local secret_name=${1:-}
  local query_mode=${2:-all}

  # Fetch secret backends
  local backends=$(backend_secret_matches "$secret_name" "$query_mode")
  [[ -n "$backends" ]] || _die 5 "Could not find secret backends for: $secret_name"

  # Test each backends
  _log INFO "Ask backends for secret '$secret_name': ${backends//,/, }"
  export FOUND_PASSWORD=
  for backend_name in ${backends//,/ }; do
    if backend_query "$backend_name" "$secret_name"; then
      _log INFO "Result found in '$backend_name' backend for: '$new_key'"
      break
    else
      _log DEBUG "No result found in '$backend_name' backend for: '$new_key'"
    fi
  done

  # Report output
  [[ -n "$FOUND_PASSWORD" ]] || _die 1 "No backends could provides secret for: $secret_name"
  printf "$FOUND_PASSWORD"
  >&2 echo 

}




###############
cli__usage ()
{
  : ",Show usage"

  cat <<- 'EOF'

# Introduction


# Command line usage

  example:
    # Fetch existing password
    fetch-pass get john_account

  example with local keyring:

    # Add/update to local secret is slow to fetch
    fetch-pass keyring add john_account

    # Check keyring status
    fetch-pass keyring st john_account

    # Check new speed
    time fetch-pass get john_account

    # remove from local keyring
    fetch-pass keyring rm john_account

# Configuration

  This is a sinple ini file located in user config path.

## Configuration example

  Cobnfiguration example:

# Global config
[config]
  backends = keyring_corp,keepass_corp,keepass_personal

# Backends config
[backend "keepass_personal"]
  cmd-fetch = keepass-cli get personal %s
  remap = corp_user|Pro/Job/my_user@corp.io
  remap = corp_keepass_devops|Pro/Job/Keepass-Devops
  remap = corp_vault_user|Pro/Job/Ansible Activia User Vault

[backend "bitwarden_corp"]
  cmd-fetch = bw get password %s
  remap = corp_vault_devops|Ansible / Vaults / corp_devops
  remap = corp_account__ansible-build-svc|Ansible / Ansible - GIT

# Secrets config
[secret "activia_user"]
  desc = Main user config

EOF

}


cli__get ()
{
  : "NAME,Get password name"
  backend_fetch "$@" "all"
}

cli__ls ()
{
  : ",List secret names"
  list_known_secrets
  # echo YOOOO
}


cli__keyring__st ()
{
  : "NAME [BACKEND],Show secret status on local keyring"

  local secret_name=$1
  local backend=${2:-}

  # Determine keyring backend
  [[ -n "$backend" ]] \
    || backend=$(backends_name_first_keyring)
  [[ -n "$backend" ]] \
    || _die 1 "The is no keyring backend: $backend"


  # Validate backend
  local backends_names=$(backends_names)
  [[ ",${backends_names}," == *,$backend,* ]] \
    || _die 1 "There is no backend '$backend' in config, please choose one of: ${backends_names//,/ }"


  # Show in keyring
  if local_keyring_exists "$secret_name"; then
    local_keyring_show "$secret_name"
  else
    _die 1 "No such secret '$secret_name' in local keyring"
  fi
}


cli__keyring__add ()
{
  : "NAME [BACKEND],Add secret to local keyring"
  local secret_name=$1
  local backend=${2:-}
  local password=


  # Determine keyring backend
  [[ -n "$backend" ]] \
    || backend=$(backends_name_first_keyring)
  [[ -n "$backend" ]] \
    || _die 1 "The is no keyring backend: $backend"


  # Validate backend
  local backends_names=$(backends_names)
  [[ ",${backends_names}," == *,$backend,* ]] \
    || _die 1 "There is no backend '$backend' in config, please choose one of: ${backends_names//,/ }"



  # Fetch secret from other sources than keyring
  password=$(backend_fetch "$secret_name" "no_keyring") || {
      _die $? "Can't retrieve current password"
    }
  # password=$(backend_fetch "$secret_name" "no_keyring" 2>/dev/null) || {
  #     _die $? "Can't retrieve current password"
  #   }


  # Save in keyring
  _log INFO "Add secret '$secret_name' to keyring backend: $backend"

  # Check if secret does not exists
  if local_keyring_exists "$secret_name" ; then
    _log INFO "Update local keyring secret: $secret_name"
    local_keyring_rm "$secret_name"
    local_keyring_add "$secret_name" "$password"
  else
    _log INFO "Create new keyring secret: $secret_name"
    local_keyring_add "$secret_name" "$password"
  fi

}


cli__keyring__rm ()
{
  : "NAME [BACKEND],Remove secret to local keyring"
  local secret_name=$1
  local backend=${2:-}


  # Determine keyring backend
  [[ -n "$backend" ]] \
    || backend=$(backends_name_first_keyring)
  [[ -n "$backend" ]] \
    || _die 1 "The is no keyring backend: $backend"


  # Validate backend
  local backends_names=$(backends_names)
  [[ ",${backends_names}," == *,$backend,* ]] \
    || _die 1 "There is no backend '$backend' in config, please choose one of: ${backends_names//,/ }"


  # Check if secret does not exists
  local_keyring_exists "$secret_name" \
    || _die 0 "Secret '$secret_name' does not exists"

  # Save in keyring
  _log INFO "Remove secret '$secret_name' to keyring backend: $backend"
  local label="$APP_NAME password for $secret_name"
  # set -x
  local_keyring_rm $secret_name
}

cli__keyring__sync ()
{
  : "[BACKEND],Sync local keyring passwords"
  local secret_name=$1
  local backend=${2:-}
  _die 1 "Not implemented yet"
}

cli__config ()
{
  : "OPTS,Query config"

  _db "$@"
}
cli__db ()
{
  : "OPTS,Query config"
  # set -x
  _db db "$@"
}


# # CLI Sub Commands
# # =================

# # Display help message
# cli__group_usage ()
# {
#   cat <<EOF
# ${APP_NAME}: Manage groups (Subcommand example)

# usage: ${APP_NAME} group [OPTS] add NAME
#        ${APP_NAME} group [OPTS] rm NAME
#        ${APP_NAME} group help
# EOF
# }

# Read CLI options, shows group level options
cli__keyring_options ()
{
  while [[ ! -z "${1:-}" ]]; do
    # : "parse-opt-start"
    case "$1" in
      -h|--help|help)
        : ",Show help"
        clish_help cli__group; _die 0
        ;;
      -a|--all)
        : ",Select all"
        mode=all
        shift
        ;;
      -m|--message)
        : "MSG,Define message"
        [[ ! -z "${2:-}" ]] || _die 1 "Missing message"
        msg=$2
        shift 2
        ;;
      -*)
        _die 1 "Unknown option: $1"
        ;;
      *)
        args=("$@")
        shift $#
      ;;
    esac
    # : "parse-opt-stop"
  done
}

cli__keyring ()
{
  : "COMMAND,Manage keyring"

  # Parse args
  clish_parse_opts cli__keyring "$@"
  set -- "${args[@]}"

  # Dispatch to sub commands
  clish_dispatch cli__keyring__ "$@" || _die $?
}


# # Basic simple level sub-commands
# # ---------------
# cli__group__add()
# {
#   : "NAME [OPTS],Add subcommand"
#   echo "Add: '$1' in '$mode' mode with message: '$msg'"
# }

# cli__group__rm()
# {
#   : "NAME,Remove subcommand"
#   echo "Remove: $1"
# }


# # Nested command names
# # ---------------
# cli__group__var ()
# {
#   : "," # Ignored from help
#   clish_dispatch cli__group__var__ "$@" \
#     || _die $? "Group command failed with error: $?" 
# }

# cli__group__var__get()
# {
#   : "VAR,Get variable"
#   echo "Value of var $1 is current date: $(date)"
# }

# cli__group__var__set()
# {
#   : "VAR VALUE,Set variable value"
#   local name=$1
#   shift
#   [ $# -gt 0 ] || return 42
#   echo "Value of var '$name' set to: $@"
# }


# Core App
# =================

# App initialization
cli_init ()
{
  # Useful shortcuts
  export VCS_DIR=$(git rev-parse --show-toplevel 2>/dev/null)
  export SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
  export WORK_DIR=${VCS_DIR:-${SCRIPT_DIR:-$PWD}}
  export PWD_DIR=${PWD}

  export FETCH_SECRET_CONF=${FETCH_SECRET_CONF:-$APP_CONFIG_FILE}
  export APP_DISABLE_KEYRING=${FETCH_SECRET_KEYRING:-$APP_DISABLE_KEYRING}
}

# Check if all required bin are available in PATH
cli_require ()
{
  local deps=${@:-${APP_DEPENDENCIES:-}}

  local prog=
  for prog in ${deps-} ; do
    _check_bin $prog || {
      _die 2 "Can't find '$prog', please install it first"
    }
  done
}

# App help message
cli_usage ()
{
  cat <<EOF
${APP_NAME} is command line tool

usage: ${APP_NAME} <COMMAND> <TARGET> [<ARGS>]
       ${APP_NAME} help
EOF
}

# Parse CLI options
cli_options ()
{
  while [[ ! -z "${1:-}" ]]; do
    # : "parse-opt-start"
    case "$1" in
      -h|--help|h)
        : ",Show this help message"
        clish_help cli; 
        _die 0
        ;;
      -n|--dry)
        : ",Enable dry mode"
        _log INFO "Dry mode enabled"
        APP_DRY=true 
        shift
        ;;
      -f|--force)
        : ",Enable force mode"
        _log INFO "Force mode enabled"
        APP_FORCE=true 
        shift
        ;;
      -K|--no-keyring)
        : ",Disable local keyring"
        _log INFO "Keyring is disabled"
        APP_DISABLE_KEYRING=true 
        shift
        ;;
      -v|-vv|-vvv|--verbose)
        : "[LEVEL],Set verbosity level"
        if [[ "$1" == "-vv" ]]; then
          APP_LOG_LEVEL=DEBUG
        elif [[ "$1" == "-vvv" ]]; then
          APP_LOG_LEVEL=TRACE
        else
          [[ ! -z "${2:-}" ]] || _die 1 "Missing log level value"
          APP_LOG_LEVEL=$2
          shift 1
        fi
        shift 1
        _log INFO "Log level set to: $APP_LOG_LEVEL"
        ;;
      -V|--version)
        : ",Show version"
        echo "$APP_VERSION"
        exit 0
        ;;
      -*)
        _die 1 "Unknown option: $1"
        ;;
      *)
        args=( "$@" )
        shift $#
        
        # To enable greedy parsing
        # args+=( "$1" )
        # shift 1
      ;;
    esac
    # : "parse-opt-stop"
  done
}

cli ()
{
  # Init
  trap '_sh_trap_error $? ${LINENO} trap_exit 42' EXIT

  # Parse CLI flags
  clish_parse_opts cli "$@"
  set -- "${args[@]}"

  # Route commands before requirements
  local cmd=${1:-help}
  shift 1 || true
  case "$cmd" in
    -h|--help|help) clish_help cli; return ;;
    # expl) cli__example "$@"; return ;;
  esac
  
  # Init app
  cli_init
  
  # Check requirements
  cli_require 

  # Dispatch subcommand
  clish_dispatch cli__ "$cmd" "$@" \
    || _die $? "Command '$cmd' returned error: $?"  
}

cli "${@}"
